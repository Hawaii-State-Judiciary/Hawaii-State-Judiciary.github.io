[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nimport pandas as pd\nfrom io import BytesIO\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"Excel File Matcher\"),\n    ui.input_file(\"file1\", \"Upload File Containing IDs (Excel)\", accept=[\".xlsx\"]),\n    ui.input_file(\"file2\", \"Upload File to Extract Data from (Excel)\", accept=[\".xlsx\"]),\n    ui.output_text_verbatim(\"status\"),\n    ui.output_table(\"preview\"),  # Show preview of merged data\n    ui.download_button(\"download\", \"Download Output File\"),\n)\n\n# Define Server\ndef server(input, output, session):\n    @reactive.calc\n    def process_data():\n        file1 = input.file1()\n        file2 = input.file2()\n\n        if not file1 or not file2:\n            return \"Please upload both files.\"\n\n        # Read uploaded Excel files\n        df_ids = pd.read_excel(file1[0][\"datapath\"])\n        df_data = pd.read_excel(file2[0][\"datapath\"])\n\n        # Validate that both files contain an \"ID\" column\n        if \"ID\" not in df_ids.columns or \"ID\" not in df_data.columns:\n            return \"Error: One or both files are missing an 'ID' column.\"\n\n        # Perform a left merge on \"ID\"\n        df_merged = df_ids.merge(df_data, on=\"ID\", how=\"left\")\n\n        return df_merged\n\n    @render.text\n    def status():\n        data = process_data()\n        if isinstance(data, str):  # If an error occurred, return the error message\n            return data\n        return \"Files successfully processed. Preview below.\"\n\n    @render.table\n    def preview():\n        data = process_data()\n        if isinstance(data, str):  # If there's an error, don't return a table\n            return None\n        return data.head(10)  # Show first 10 rows of the merged output\n\n    @session.download(filename=\"output.xlsx\")\n    def download():\n        df = process_data()\n        if isinstance(df, str):  # If an error occurred, stop download\n            return None\n\n        output_buffer = BytesIO()\n\n        # Use ExcelWriter to properly write the DataFrame\n        with pd.ExcelWriter(output_buffer, engine=\"openpyxl\") as writer:\n            df.to_excel(writer, index=False)\n\n        output_buffer.seek(0)  # Move to start of buffer\n\n        # Yield the file content as a stream (prevents file corruption)\n        yield output_buffer.getvalue()\n\n\n\n# Run the app\napp = App(app_ui, server)\n", "type": "text"}, {"name": "2025-02-06_join_tool_for_ICIS.Rproj", "content": "Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\npandas\nio", "type": "text"}, {"name": "shiny_app.py", "content": "from shiny import App, ui, render, reactive\nimport pandas as pd\nfrom io import BytesIO\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.h2(\"Excel File Matcher\"),\n    ui.input_file(\"file1\", \"Upload File Containing IDs (Excel)\", accept=[\".xlsx\"]),\n    ui.input_file(\"file2\", \"Upload File to Extract Data from (Excel)\", accept=[\".xlsx\"]),\n    ui.output_text_verbatim(\"status\"),\n    ui.output_table(\"preview\"),  # Show preview of merged data\n    ui.download_button(\"download\", \"Download Output File\"),\n)\n\n# Define Server\ndef server(input, output, session):\n    @reactive.calc\n    def process_data():\n        file1 = input.file1()\n        file2 = input.file2()\n\n        if not file1 or not file2:\n            return \"Please upload both files.\"\n\n        # Read uploaded Excel files\n        df_ids = pd.read_excel(file1[0][\"datapath\"])\n        df_data = pd.read_excel(file2[0][\"datapath\"])\n\n        # Validate that both files contain an \"ID\" column\n        if \"ID\" not in df_ids.columns or \"ID\" not in df_data.columns:\n            return \"Error: One or both files are missing an 'ID' column.\"\n\n        # Perform a left merge on \"ID\"\n        df_merged = df_ids.merge(df_data, on=\"ID\", how=\"left\")\n\n        return df_merged\n\n    @render.text\n    def status():\n        data = process_data()\n        if isinstance(data, str):  # If an error occurred, return the error message\n            return data\n        return \"Files successfully processed. Preview below.\"\n\n    @render.table\n    def preview():\n        data = process_data()\n        if isinstance(data, str):  # If there's an error, don't return a table\n            return None\n        return data.head(10)  # Show first 10 rows of the merged output\n\n    @session.download(filename=\"output.xlsx\")\n    def download():\n        df = process_data()\n        if isinstance(df, str):  # If an error occurred, stop download\n            return None\n\n        output_buffer = BytesIO()\n\n        # Use ExcelWriter to properly write the DataFrame\n        with pd.ExcelWriter(output_buffer, engine=\"openpyxl\") as writer:\n            df.to_excel(writer, index=False)\n\n        output_buffer.seek(0)  # Move to start of buffer\n\n        # Yield the file content as a stream (prevents file corruption)\n        yield output_buffer.getvalue()\n\n\n\n# Run the app\napp = App(app_ui, server)\n", "type": "text"}]